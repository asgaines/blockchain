syntax = "proto3";

package blockchain;

option go_package = "github.com/asgaines/blockchain/protogo/blockchain";

import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";

message Block {
	google.protobuf.Timestamp timestamp = 1;
	bytes prevhash = 2;
	uint64 nonce = 3;
	bytes target = 4;
	bytes merkleRoot = 5;
	repeated Tx txs = 6;
}

message Chain {
    repeated Block blocks = 1;
}

message NodeID {
    // pubkey is the public key of the client
    string pubkey = 1;
    // id is the unique identifier of a node within a pool; a collection of nodes
    // mining for the same pubkey
    int32 id = 2;
    // returnAddr is the path back to the requesting peer so the responding peer
    // can connect back. Current methods for discovering request ip not reliable within
    // Docker container
    string returnAddr = 3;
}

message Tx {
    // timestamp is the moment the tx was generated
    google.protobuf.Timestamp timestamp = 1;
    // value is the amount of credit being transferred
    double value = 2;
    // sender is the public key of the payer, the one giving credit
    string sender = 3;
    // recipient is the public key of the payee, the one receiving credit
    string recipient = 4;
    // message is an optional field to describe or provide metadata for the transaction
    string message = 5;
    // hash is the sha256 hash of the pertinent fields of the transaction
	bytes hash = 6;
}

service Node {
    rpc Discover(DiscoverRequest) returns (DiscoverResponse);
    rpc GetState(GetStateRequest) returns (GetStateResponse);
    rpc ShareChain(ShareChainRequest) returns (ShareChainResponse);
    rpc ShareTx(ShareTxRequest) returns (ShareTxResponse);
    rpc GetCredit(GetCreditRequest) returns (GetCreditResponse);
}

message DiscoverRequest {
    NodeID nodeID = 1;
    // peerAddrs is the collection of addresses of known nodes.
    // They can be used to further discover more peers
    repeated string knownAddrs = 2;
}

message DiscoverResponse {
    NodeID nodeID = 1;
    // ok signifies to the pinger that it is ok to connect with and share
    // new tx and block solve propagations
    bool ok = 2;
    // peerAddrs is the collection of addresses of other known nodes.
    // They can be used to further discover more peers
    repeated string knownAddrs = 3;
}

message GetStateRequest {
    NodeID nodeID = 1;
}

message GetStateResponse {
    Chain chain = 1;
    double difficulty = 2;
}

message ShareChainRequest {
    NodeID nodeID = 1;
    Chain chain = 2;
}

message ShareChainResponse {
    bool accepted = 1;
}

message ShareTxRequest {
    NodeID nodeID = 1;
    Tx tx = 2;
}

message ShareTxResponse {
    bool accepted = 1;
    string info = 2;
}

message GetCreditRequest {
    NodeID nodeID = 1;
    string pubkey = 2;
}

message GetCreditResponse {
    double value = 1;
}